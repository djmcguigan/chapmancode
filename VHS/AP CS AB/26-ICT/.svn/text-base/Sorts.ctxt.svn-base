#BlueJ class context
comment0.target=Sorts()
comment0.text=\nDescription\ of\ Constructor\n\n@param\ \ list\ \ Description\ of\ Parameter\n\n
comment1.params=list
comment1.target=void\ bubbleSort(ArrayList<Comparable>)
comment1.text=\nDescription\ of\ the\ Method\n\n@param\ \ list\ \ reference\ to\ an\ array\ of\ integers\ to\ be\ sorted\n\n
comment2.params=list
comment2.target=void\ selectionSort(ArrayList<Comparable>)
comment2.text=\nDescription\ of\ the\ Method\n\n@param\ \ list\ \ reference\ to\ an\ array\ of\ integers\ to\ be\ sorted\n\n
comment3.params=list
comment3.target=void\ insertionSort(ArrayList<Comparable>)
comment3.text=\nDescription\ of\ the\ Method\n\n@param\ \ list\ \ reference\ to\ an\ array\ of\ integers\ to\ be\ sorted\n\n
comment4.params=list\ first\ mid\ last
comment4.target=void\ merge(ArrayList<Comparable>,\ int,\ int,\ int)
comment4.text=\nTakes\ in\ entire\ vector,\ but\ will\ merge\ the\ following\ sections\ntogether\:\ \ Left\ sublist\ from\ a[first]..a[mid],\ right\ sublist\ from\na[mid+1]..a[last].\ \ Precondition\:\ \ each\ sublist\ is\ already\ in\nascending\ order\n\n@param\ \ a\ \ \ \ \ \ reference\ to\ an\ array\ of\ integers\ to\ be\ sorted\n@param\ \ first\ \ starting\ index\ of\ range\ of\ values\ to\ be\ sorted\n@param\ \ mid\ \ \ \ midpoint\ index\ of\ range\ of\ values\ to\ be\ sorted\n@param\ \ last\ \ \ last\ index\ of\ range\ of\ values\ to\ be\ sorted\n\n
comment5.params=list\ first\ last
comment5.target=void\ mergeSort(ArrayList<Comparable>,\ int,\ int)
comment5.text=\nRecursive\ mergesort\ of\ an\ array\ of\ integers\n\n@param\ \ a\ \ \ \ \ \ reference\ to\ an\ array\ of\ integers\ to\ be\ sorted\n@param\ \ first\ \ starting\ index\ of\ range\ of\ values\ to\ be\ sorted\n@param\ \ last\ \ \ ending\ index\ of\ range\ of\ values\ to\ be\ sorted\n\n
comment6.params=list\ first\ last
comment6.target=void\ quickSort(ArrayList<Comparable>,\ int,\ int)
comment7.target=long\ getStepCount()
comment7.text=\nAccessor\ method\ to\ return\ the\ current\ value\ of\ steps\n\n\n
comment8.params=stepCount
comment8.target=void\ setStepCount(long)
comment8.text=\nModifier\ method\ to\ set\ or\ reset\ the\ step\ count.\ Usually\ called\nprior\ to\ invocation\ of\ a\ sort\ method.\n\n@param\ \ stepCount\ \ \ value\ assigned\ to\ steps\n\n
comment9.params=list\ a\ b
comment9.target=void\ swap(ArrayList<Comparable>,\ int,\ int)
comment9.text=\nInterchanges\ two\ elements\ in\ an\ ArrayList\n\n@param\ \ list\ \ reference\ to\ an\ array\ of\ integers\n@param\ \ a\ \ \ \ \ index\ of\ integer\ to\ be\ swapped\n@param\ \ b\ \ \ \ \ index\ of\ integer\ to\ be\ swapped\n\n
numComments=10
